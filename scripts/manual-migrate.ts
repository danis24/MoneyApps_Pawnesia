#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync, mkdirSync, readdirSync } from 'fs';
import { join } from 'path';
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Load environment variables
config({ path: '.env.local' });
config();

interface MigrationFile {
  name: string;
  path: string;
  content: string;
}

class ManualSupabaseMigrator {
  private supabaseUrl: string;
  private supabaseKey: string;
  private migrationsDir: string;

  constructor() {
    this.supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    this.supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
    this.migrationsDir = join(process.cwd(), 'supabase', 'migrations');

    if (!this.supabaseUrl || !this.supabaseKey) {
      throw new Error('Missing required environment variables: NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY');
    }
  }

  getMigrationFiles(): MigrationFile[] {
    if (!existsSync(this.migrationsDir)) {
      mkdirSync(this.migrationsDir, { recursive: true });
      return [];
    }

    const files = readdirSync(this.migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .map(file => {
        const path = join(this.migrationsDir, file);
        const content = readFileSync(path, 'utf8');
        return {
          name: file,
          path,
          content
        };
      })
      .sort((a, b) => a.name.localeCompare(b.name));

    return files;
  }

  generateCombinedSQL(): string {
    const migrationFiles = this.getMigrationFiles();

    if (migrationFiles.length === 0) {
      throw new Error('No migration files found');
    }

    // Combine all migrations into one SQL script
    let combinedSQL = '-- MoneyApps Database Schema\n';
    combinedSQL += '-- Generated by migration script\n';
    combinedSQL += '-- ' + new Date().toISOString() + '\n\n';

    // Add migrations table creation
    combinedSQL += '-- Create migrations table for tracking\n';
    combinedSQL += `CREATE TABLE IF NOT EXISTS schema_migrations (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);\n\n`;

    combinedSQL += 'GRANT ALL ON schema_migrations TO authenticated;\n';
    combinedSQL += 'GRANT SELECT ON schema_migrations TO anon;\n\n';

    // Add each migration
    for (const migration of migrationFiles) {
      combinedSQL += `-- Migration: ${migration.name}\n`;
      combinedSQL += `-- Path: ${migration.path}\n\n`;

      // Clean up the SQL content
      let cleanContent = migration.content;

      // Remove any existing transaction statements
      cleanContent = cleanContent.replace(/BEGIN;/gi, '');
      cleanContent = cleanContent.replace(/COMMIT;/gi, '');
      cleanContent = cleanContent.replace(/ROLLBACK;/gi, '');

      // Fix constraint syntax - PostgreSQL doesn't support ADD CONSTRAINT IF NOT EXISTS
      cleanContent = cleanContent.replace(/ADD CONSTRAINT IF NOT EXISTS (\w+)/gi, 'ADD CONSTRAINT $1');

      // Handle unique constraints properly with DO blocks
      cleanContent = cleanContent.replace(
        /ALTER TABLE (\w+) ADD CONSTRAINT IF NOT EXISTS (\w+) UNIQUE \((\w+)\);/gi,
        'DO $$\nBEGIN\n    ALTER TABLE $1 ADD CONSTRAINT $2 UNIQUE ($3);\nEXCEPTION WHEN duplicate_table_object THEN\n    -- Constraint already exists, ignore\nEND;\n$$;'
      );

      // Fix IF NOT EXISTS for triggers
      cleanContent = cleanContent.replace(/CREATE TRIGGER IF NOT EXISTS (\w+)/gi, 'CREATE TRIGGER $1');

      // Add the cleaned content
      combinedSQL += cleanContent + '\n\n';

      // Add migration record insertion
      combinedSQL += `-- Record migration execution\n`;
      combinedSQL += `INSERT INTO schema_migrations (name) VALUES ('${migration.name}') ON CONFLICT (name) DO NOTHING;\n\n`;

      combinedSQL += '-- ' + '='.repeat(60) + '\n\n';
    }

    return combinedSQL;
  }

  generateSQLFile(): void {
    try {
      const combinedSQL = this.generateCombinedSQL();
      const outputPath = join(process.cwd(), 'supabase', 'combined-migrations.sql');

      writeFileSync(outputPath, combinedSQL);
      console.log(`‚úÖ Combined SQL file created: ${outputPath}`);
      console.log('');
      console.log('üìã Next steps:');
      console.log('1. Go to your Supabase dashboard: https://supabase.com/dashboard');
      console.log('2. Select your project');
      console.log('3. Go to "SQL Editor"');
      console.log('4. Click "New query"');
      console.log(`5. Copy the content from: ${outputPath}`);
      console.log('6. Paste and run the SQL');
      console.log('');
      console.log('‚ö†Ô∏è  This will create all tables and set up RLS policies');
    } catch (error) {
      console.error('‚ùå Failed to generate SQL file:', error);
      throw error;
    }
  }

  showStatus(): void {
    console.log('üìä Available Migrations:\n');

    const migrationFiles = this.getMigrationFiles();

    if (migrationFiles.length === 0) {
      console.log('No migration files found');
      return;
    }

    console.log('Found the following migration files:');
    console.log('');

    for (const migration of migrationFiles) {
      console.log(`üìÑ ${migration.name}`);
      const lineCount = migration.content.split('\n').length;
      console.log(`   Lines: ${lineCount}`);
      console.log(`   Path: ${migration.path}`);
      console.log('');
    }

    console.log(`Total: ${migrationFiles.length} migration files`);
  }

  createMigration(name: string): void {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const filename = `${timestamp}_${name}.sql`;
    const filepath = join(this.migrationsDir, filename);

    const template = `-- Migration: ${name}
-- Created: ${new Date().toISOString()}

-- Add your migration SQL here
-- Example:
-- CREATE TABLE example_table (
--     id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
--     name TEXT NOT NULL,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
-- );

-- Don't forget to add RLS policies:
-- ALTER TABLE example_table ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Users can view own data" ON example_table FOR SELECT USING (auth.jwt() ->> 'sub' = user_id);

`;

    if (!existsSync(this.migrationsDir)) {
      mkdirSync(this.migrationsDir, { recursive: true });
    }

    writeFileSync(filepath, template);
    console.log(`‚úÖ Created migration file: ${filename}`);
    console.log(`   Location: ${filepath}`);
  }
}

// CLI Handler
function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (!command || command === '--help' || command === '-h') {
    console.log(`
Manual Supabase Migration Generator

This script generates combined SQL files that you can run manually in Supabase.

Usage:
  npm run db:generate     # Generate combined SQL file for manual execution
  npm run db:status       # Show available migration files
  npm run db:create <name> # Create new migration file

Examples:
  npm run db:generate
  npm run db:create add_users_table
  npm run db:status

‚ö†Ô∏è  Note: This approach requires manual execution in Supabase SQL Editor
`);
    process.exit(0);
  }

  try {
    const migrator = new ManualSupabaseMigrator();

    switch (command) {
      case 'generate':
        migrator.generateSQLFile();
        break;

      case 'status':
        migrator.showStatus();
        break;

      case 'create':
        const name = args[1];
        if (!name) {
          console.error('‚ùå Migration name is required');
          process.exit(1);
        }
        migrator.createMigration(name);
        break;

      default:
        console.error(`‚ùå Unknown command: ${command}`);
        console.log('Use --help for usage information');
        process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { ManualSupabaseMigrator };